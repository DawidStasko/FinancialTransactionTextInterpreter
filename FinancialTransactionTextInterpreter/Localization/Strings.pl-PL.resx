<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrorMessage_InformationAboutAccountsNumberInTransaction" xml:space="preserve">
    <value>Tekst transakcji powinien zawierać co najmniej jedno i nie więcej niż dwa konta.</value>
  </data>
  <data name="ErrorMessage_InformationAboutCategoryRequirementForItems" xml:space="preserve">
    <value>Elementy transakcji powinny mieć wpisaną kategorię przed nimi.</value>
  </data>
  <data name="ErrorMessage_InformationAboutContractorsNumber" xml:space="preserve">
    <value>Tekst transakcji zawiera zbyt wielu kontraktorów.</value>
  </data>
  <data name="ErrorMessage_InformationAboutDateFormat" xml:space="preserve">
    <value>Data powinna mieć format dd-MM-yyyy.</value>
  </data>
  <data name="ErrorMessage_ProcessingWasNotDoneYet" xml:space="preserve">
    <value>Tekst transakcji nie został jeszcze zinterpretowany.</value>
  </data>
  <data name="ErrorMessage_TransactionTextIsEmpty" xml:space="preserve">
    <value>Tekst transakcji jest pusty.</value>
  </data>
  <data name="ErrorMessage_UnexpectedErrorWhenProcessing" xml:space="preserve">
    <value>Niespodziewany błąd podczas procesowania transakcji.</value>
  </data>
  <data name="HelpBoxView_ExamplesSectionContent" xml:space="preserve">
    <value>- Transakcja z nazwami elementów:

&amp;22-04-2024 $Portfel #Jedzenie bułka 2.2 2.2 +0.4 szynka 3.3 #Zachcianka baton 4,5 @Żaba

Z  tego tekstu utworzona zostanie transakcja z kontrahentem o nazwie Żaba, zawarta 22 kwietnia 2024 roku, którą opłacono z konta o nazwie portfel. Utworzone w zostaną elementy tej transakcji: bułka z ceną - 4 i kategorią jedzenie, szynka z ceną - 3.3 i kategorią jedzenie oraz baton z ceną - 4.5 i kategorią zachcianka.
- Transakcja bez nazw elementów

&amp;22-04-2024 $Bank #Jedzenie 2.2 2.2 +0.4  3.3 #Zachcianka 4,5 @Żaba

W tym przypadku utworzona zostanie również transakcja z kontrahentem o nazwie Żaba, zawarta 22 kwietnia 2024 roku, którą opłacono z konta o nazwie bank. Jednakże będzie ona miała dwa elementy jeden o nazwie jedzenie z ceną - 7.3 i kategorią jedzenie i drugi o nazwie zachcianka z ceną -4.5 i nazwą Zachcianka
- Transfer:

&amp;22-04-2024 $Bank &gt; $Portfel 2.2 2.2 +0.4 3.3

Utworzone zostaną dwie transakcję pierwsza którą opłaconą z konta Bank i kontrahentem jest Portfel która posiada jeden element o nazwie transfer z kategorią TransferOut i wartością -7.3 oraz drugą ""opłaconą"" z konta Portfel i kontrahentem Bank oraz elementem transfer z kategorii TransferIn i wartością 7.3. W transferach nie są dozwolone nazwy elementów, kategorie czy też kontrahent.</value>
  </data>
  <data name="HelpBoxView_ExamplesSectionTitle" xml:space="preserve">
    <value>Przykłady</value>
  </data>
  <data name="HelpBoxView_GeneralHelpSectionContent" xml:space="preserve">
    <value>Słowniczek:
- Transakcja - transakcja wykonywana z podmiotem zewnętrznym: sklep, pracodawcą czy kimś z rodziny
- Transfer - transakcja wykonywana pomiędzy wewnętrznymi kontami, np. wypłata z konta i włożenie pieniędzy do portfela
- Tag - znak na początku pojedynczego wyrazu w tekście transakcji określający rodzaj danych do których wyraz się odnosi.

Funkcjonalności:
- Każdemu elementowi transakcji przypisywana jest najbliższa poprzedzająca go kategoria.
- Wszystkie wyrazy bez tagu i nie będące liczbami są traktowane jako nazwa elementu transakcji. W przypadku braku nazwy przypisana zostanie aktualna kategoria.
- Wszystkie wyrazy będące liczbami po danej nazwie są sumowane i zapisywane jako cena elementu</value>
  </data>
  <data name="HelpBoxView_GeneralHelpSectionTitle" xml:space="preserve">
    <value>Pomoc</value>
  </data>
  <data name="HelpBoxView_TagsSectionContent" xml:space="preserve">
    <value>- &amp; - data. Jedna data na transakcje/transfer.
- $ - konto. W transakcji można wskazać tylko jedno konto. W transferze dwa: źródłowe i docelowe. Przepływ pieniędzy określa znak '&gt;
- # - kategoria. Może byś wprowadzona tylko dla transakcji. Każdy element wpisany po danej kategorii będzie do niej należał'
- @ - kontrahent. Jeden kontrahent na transakcję i tylko w transakcji może być wprowadzony.
- + - używany w transakcjach/transferach do określenia przychodu. By default wszystkie liczby są traktowane jako ujemne, chyba że użyto przed nimi plusa
- brak znaku oznacza że wyraz należy do nazwy elementu transakcji albo jest ceną elementu.</value>
  </data>
  <data name="HelpBoxView_TagsSectionTitle" xml:space="preserve">
    <value>Tagi</value>
  </data>
  <data name="LanguageSelector_MessageBoxContent" xml:space="preserve">
    <value>Aplikacja wymaga ponownego uruchomienia w celu wprowadzenia zmian w ustawieniach.</value>
  </data>
  <data name="LanguageSelector_MessageBoxTitle" xml:space="preserve">
    <value>Wymagane ponowne uruchomienie</value>
  </data>
  <data name="PromptInput_ClearTextButton" xml:space="preserve">
    <value>Wyczyść tekst</value>
  </data>
  <data name="PromptInput_ProcessTextButton" xml:space="preserve">
    <value>Dodaj</value>
  </data>
</root>